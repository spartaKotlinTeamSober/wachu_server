name: CD

on:
  push:
    branches:
      - feat/*
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.yml 복사
      - name: set yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./src/main/resources/application.yml
          find src

      # application-dev.yml 복사
      - name: set yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_DEV_YML }}" | base64 --decode > ./src/main/resources/application-dev.yml
          find src

      # application-prod.yml 복사
      - name: set yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > ./src/main/resources/application-prod.yml
          find src


      # gradle 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: gradlew build
        run: ./gradlew clean build -Pprod

      # docker 빌드 & 푸쉬
      - name: Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-dev

      # 인스턴스1에 배포
      - name: Deploy to application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            sudo docker stop $(sudo docker ps -q)
            sudo docker rm $(sudo docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-dev
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-dev
            sudo docker image prune -f

      #      # 인스턴스2에 배포
      #      - name: Deploy to application2
      #        uses: appleboy/ssh-action@master
      #        with:
      #          host: ${{ secrets.SSH_HOST2 }}
      #          username: ubuntu
      #          key: ${{ secrets.SSH_KEY }}
      #          port: 22
      #          script: |
      #            sudo docker stop $(sudo docker ps -q)
      #            sudo docker rm $(sudo docker ps -a -q)
      #            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-dev
      #            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-dev
      #            sudo docker image prune -f

      # 결과 Slack에 전송
      - name: result send slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RESULT_SLACK_CD }} # required
        if: always() # Pick up events even if the job fails or is canceled.
